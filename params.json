{
  "name": "USBH_MIDI",
  "tagline": "USB MIDI class driver for Arduino USB Host Shield 2.0 Library",
  "body": "USBH_MIDI is USB-MIDI class driver for Arduino [USB Host Shield 2.0 Library][UHS2].  \r\nYou can convert USB MIDI keyboard  to legacy serial MIDI.  \r\nPlease check [device list][wiki]\r\n\r\n## How to install\r\nUSBH_MIDI is included in [USB Host Shield 2.0 Library][UHS2].\r\n\r\n### for single device\r\n> File->Examples->USB Host Shield library 2.0->USBH_MIDI->USB_MIDI_converter\r\n\r\n### for multiple device (with USB hub)\r\n> File->Examples->USB Host Shield library 2.0->USBH_MIDI->USB_MIDI_converter_multi\r\n\r\n## API\r\n### `uint8_t RecvData(uint8_t *outBuf)`\r\n  Receive MIDI message (3 bytes)  \r\n  return value is MIDI message length(0-3)\r\n\r\n***\r\n\r\n### `uint8_t RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)`\r\n  Receive raw USB-MIDI Event Packets (each 4 bytes, upto 64 bytes).  \r\n  `dataptr` must allocate 64bytes buffer.  \r\n  return value is 0:Success, non-zero:Error(MAX3421E HRSLT) and bytes_rcvd is received USB packet length.  \r\n  note: USB packet length is not necessarily the length of the MIDI message.\r\n\r\n***\r\n\r\n### `uint8_t SendData(uint8_t *dataptr, byte nCable=0)`\r\n  Send MIDI message. You can set CableNumber(default=0).  \r\n  return value is 0:Success, non-zero:Error(MAX3421E HRSLT)\r\n\r\n***\r\n\r\n### `uint8_t SendSysEx(uint8_t *dataptr, unsigned int datasize, byte nCable=0)`\r\n  Send SysEx MIDI message. You can set CableNumber(default=0).  \r\n  return value is 0:Success, non-zero:Error(MAX3421E HRSLT)  \r\n  note: You must set first byte:0xf0 and last byte:0xf7\r\n\r\n***\r\n## License\r\nCopyright &copy; 2012-2016 Yuuichi Akagawa (@YuuichiAkagawa)\r\n\r\n[wiki]: https://github.com/YuuichiAkagawa/USBH_MIDI/wiki\r\n[UHS2]: https://github.com/felis/USB_Host_Shield_2.0\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}